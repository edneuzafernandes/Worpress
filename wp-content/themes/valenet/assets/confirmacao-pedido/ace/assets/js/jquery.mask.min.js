//// jQuery Mask Plugin v1.7.7
//// github.com/igorescobar/jQuery-Mask-Plugin
//(function (f) { "function" === typeof define && define.amd ? define(["jquery"], f) : f(window.jQuery || window.Zepto) })(function (f) {
//    var A = function (a, d, b) {
//        var h = this, m, p; a = f(a); d = "function" === typeof d ? d(a.val(), void 0, a, b) : d; var c = {
//            getCaret: function () { try { var e, l = 0, c = a.get(0), g = document.selection, d = c.selectionStart; if (g && !~navigator.appVersion.indexOf("MSIE 10")) e = g.createRange(), e.moveStart("character", a.is("input") ? -a.val().length : -a.text().length), l = e.text.length; else if (d || "0" === d) l = d; return l } catch (b) { } }, setCaret: function (e) {
//                try {
//                    if (a.is(":focus")) {
//                        var l,
//                        c = a.get(0); c.setSelectionRange ? c.setSelectionRange(e, e) : c.createTextRange && (l = c.createTextRange(), l.collapse(!0), l.moveEnd("character", e), l.moveStart("character", e), l.select())
//                    }
//                } catch (g) { }
//            }, events: function () {
//                a.on("keydown.mask", function () { m = c.val() }).on("keyup.mask", c.behaviour).on("paste.mask drop.mask", function () { setTimeout(function () { a.keydown().keyup() }, 100) }).on("change.mask", function () { a.data("changed", !0) }).on("blur.mask", function () {
//                    m === a.val() || a.data("changed") || a.trigger("change"); a.data("changed",
//                    !1)
//                }).on("focusout.mask", function () { b.clearIfNotMatch && !p.test(c.val()) && c.val("") })
//            }, getRegexMask: function () { for (var e = [], a, c, g, b, k = 0; k < d.length; k++) (a = h.translation[d[k]]) ? (c = a.pattern.toString().replace(/.{1}$|^.{1}/g, ""), g = a.optional, (a = a.recursive) ? (e.push(d[k]), b = { digit: d[k], pattern: c }) : e.push(g || a ? c + "?" : c)) : e.push(d[k].replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")); e = e.join(""); b && (e = e.replace(new RegExp("(" + b.digit + "(.*" + b.digit + ")?)"), "($1)?").replace(new RegExp(b.digit, "g"), b.pattern)); return new RegExp(e) },
//            destroyEvents: function () { a.off("keydown keyup paste drop change blur focusout DOMNodeInserted ".split(" ").join(".mask ")).removeData("changeCalled") }, val: function (e) { var c = a.is("input"); return 0 < arguments.length ? c ? a.val(e) : a.text(e) : c ? a.val() : a.text() }, getMCharsBeforeCount: function (e, a) { for (var c = 0, b = 0, f = d.length; b < f && b < e; b++) h.translation[d.charAt(b)] || (e = a ? e + 1 : e, c++); return c }, caretPos: function (e, a, b, g) {
//                return h.translation[d.charAt(Math.min(e - 1, d.length - 1))] ? Math.min(e + b - a - g, b) : c.caretPos(e + 1,
//                a, b, g)
//            }, behaviour: function (a) { a = a || window.event; var b = a.keyCode || a.which; if (-1 === f.inArray(b, h.byPassKeys)) { var d = c.getCaret(), g = c.val(), t = g.length, k = d < t, m = c.getMasked(), n = m.length, p = c.getMCharsBeforeCount(n - 1) - c.getMCharsBeforeCount(t - 1); m !== g && c.val(m); !k || 65 === b && a.ctrlKey || (8 !== b && 46 !== b && (d = c.caretPos(d, t, n, p)), c.setCaret(d)); return c.callbacks(a) } }, getMasked: function (a) {
//                var l = [], f = c.val(), g = 0, m = d.length, k = 0, p = f.length, n = 1, u = "push", r = -1, q, v; b.reverse ? (u = "unshift", n = -1, q = 0, g = m - 1, k = p - 1, v = function () {
//                    return -1 <
//                    g && -1 < k
//                }) : (q = m - 1, v = function () { return g < m && k < p }); for (; v() ;) { var w = d.charAt(g), x = f.charAt(k), s = h.translation[w]; if (s) x.match(s.pattern) ? (l[u](x), s.recursive && (-1 === r ? r = g : g === q && (g = r - n), q === r && (g -= n)), g += n) : s.optional && (g += n, k -= n), k += n; else { if (!a) l[u](w); x === w && (k += n); g += n } } a = d.charAt(q); m !== p + 1 || h.translation[a] || l.push(a); return l.join("")
//            }, callbacks: function (e) {
//                var f = c.val(), h = f !== m; if (!0 === h && "function" === typeof b.onChange) b.onChange(f, e, a, b); if (!0 === h && "function" === typeof b.onKeyPress) b.onKeyPress(f,
//                e, a, b); if ("function" === typeof b.onComplete && f.length === d.length) b.onComplete(f, e, a, b)
//            }
//        }; h.mask = d; h.options = b; h.remove = function () { var b; c.destroyEvents(); c.val(h.getCleanVal()).removeAttr("maxlength"); b = c.getCaret(); c.setCaret(b - c.getMCharsBeforeCount(b)); return a }; h.getCleanVal = function () { return c.getMasked(!0) }; h.init = function () {
//            b = b || {}; h.byPassKeys = [9, 16, 17, 18, 36, 37, 38, 39, 40, 91]; h.translation = {
//                0: { pattern: /\d/ }, 9: { pattern: /\d/, optional: !0 }, "#": { pattern: /\d/, recursive: !0 }, A: { pattern: /[a-zA-Z0-9]/ },
//                S: { pattern: /[a-zA-Z]/ }
//            }; h.translation = f.extend({}, h.translation, b.translation); h = f.extend(!0, {}, h, b); p = c.getRegexMask(); !1 !== b.maxlength && a.attr("maxlength", d.length); b.placeholder && a.attr("placeholder", b.placeholder); a.attr("autocomplete", "off"); c.destroyEvents(); c.events(); var e = c.getCaret(); c.val(c.getMasked()); c.setCaret(e + c.getMCharsBeforeCount(e, !0))
//        }()
//    }, y = {}, z = function () {
//        var a = f(this), d = {}; a.attr("data-mask-reverse") && (d.reverse = !0); "false" === a.attr("data-mask-maxlength") && (d.maxlength = !1);
//        a.attr("data-mask-clearifnotmatch") && (d.clearIfNotMatch = !0); a.mask(a.attr("data-mask"), d)
//    }; f.fn.mask = function (a, d) { var b = this.selector, h = function () { var b = f(this).data("mask"), h = JSON.stringify; if ("object" !== typeof b || h(b.options) !== h(d) || b.mask !== a) return f(this).data("mask", new A(this, a, d)) }; this.each(h); b && !y[b] && (y[b] = !0, setTimeout(function () { f(document).on("DOMNodeInserted.mask", b, h) }, 500)) }; f.fn.unmask = function () { try { return this.each(function () { f(this).data("mask").remove().removeData("mask") }) } catch (a) { } };
//    f.fn.cleanVal = function () { return this.data("mask").getCleanVal() }; f("*[data-mask]").each(z); f(document).on("DOMNodeInserted.mask", "*[data-mask]", z)
//});















// jQuery Mask Plugin v1.11.2
// github.com/igorescobar/jQuery-Mask-Plugin
(function (a) { "function" === typeof define && define.amd ? define(["jquery"], a) : a(window.jQuery || window.Zepto) })(function (a) {
    var y = function (b, d, e) {
        b = a(b); var g = this, l = b.val(), m; d = "function" === typeof d ? d(b.val(), void 0, b, e) : d; var c = {
            invalid: [], getCaret: function () {
                try {
                    var k, r = 0, a = b.get(0), f = document.selection, c = a.selectionStart; if (f && -1 === navigator.appVersion.indexOf("MSIE 10")) k = f.createRange(), k.moveStart("character", b.is("input") ? -b.val().length : -b.text().length), r = k.text.length; else if (c || "0" === c) r = c;
                    return r
                } catch (d) { }
            }, setCaret: function (k) { try { if (b.is(":focus")) { var r, a = b.get(0); a.setSelectionRange ? a.setSelectionRange(k, k) : a.createTextRange && (r = a.createTextRange(), r.collapse(!0), r.moveEnd("character", k), r.moveStart("character", k), r.select()) } } catch (c) { } }, events: function () {
                b.on("keyup.mask", c.behaviour).on("paste.mask drop.mask", function () { setTimeout(function () { b.keydown().keyup() }, 100) }).on("change.mask", function () { b.data("changed", !0) }).on("blur.mask", function () {
                    l === b.val() || b.data("changed") ||
                    b.trigger("change"); b.data("changed", !1)
                }).on("keydown.mask, blur.mask", function () { l = b.val() }).on("focus.mask", function (k) { !0 === e.selectOnFocus && a(k.target).select() }).on("focusout.mask", function () { e.clearIfNotMatch && !m.test(c.val()) && c.val("") })
            }, getRegexMask: function () {
                for (var k = [], b, a, c, e, h = 0; h < d.length; h++) (b = g.translation[d[h]]) ? (a = b.pattern.toString().replace(/.{1}$|^.{1}/g, ""), c = b.optional, (b = b.recursive) ? (k.push(d[h]), e = { digit: d[h], pattern: a }) : k.push(c || b ? a + "?" : a)) : k.push(d[h].replace(/[-\/\\^$*+?.()|[\]{}]/g,
                "\\$&")); k = k.join(""); e && (k = k.replace(RegExp("(" + e.digit + "(.*" + e.digit + ")?)"), "($1)?").replace(RegExp(e.digit, "g"), e.pattern)); return RegExp(k)
            }, destroyEvents: function () { b.off("keydown keyup paste drop blur focusout ".split(" ").join(".mask ")) }, val: function (k) { var a = b.is("input") ? "val" : "text"; if (0 < arguments.length) { if (b[a]() !== k) b[a](k); a = b } else a = b[a](); return a }, getMCharsBeforeCount: function (a, b) { for (var c = 0, f = 0, e = d.length; f < e && f < a; f++) g.translation[d.charAt(f)] || (a = b ? a + 1 : a, c++); return c }, caretPos: function (a,
            b, e, f) { return g.translation[d.charAt(Math.min(a - 1, d.length - 1))] ? Math.min(a + e - b - f, e) : c.caretPos(a + 1, b, e, f) }, behaviour: function (b) { b = b || window.event; c.invalid = []; var e = b.keyCode || b.which; if (-1 === a.inArray(e, g.byPassKeys)) { var d = c.getCaret(), f = c.val().length, p = d < f, h = c.getMasked(), l = h.length, n = c.getMCharsBeforeCount(l - 1) - c.getMCharsBeforeCount(f - 1); c.val(h); !p || 65 === e && b.ctrlKey || (8 !== e && 46 !== e && (d = c.caretPos(d, f, l, n)), c.setCaret(d)); return c.callbacks(b) } }, getMasked: function (b) {
                var a = [], l = c.val(), f =
                0, p = d.length, h = 0, m = l.length, n = 1, q = "push", u = -1, t, w; e.reverse ? (q = "unshift", n = -1, t = 0, f = p - 1, h = m - 1, w = function () { return -1 < f && -1 < h }) : (t = p - 1, w = function () { return f < p && h < m }); for (; w() ;) { var x = d.charAt(f), v = l.charAt(h), s = g.translation[x]; if (s) v.match(s.pattern) ? (a[q](v), s.recursive && (-1 === u ? u = f : f === t && (f = u - n), t === u && (f -= n)), f += n) : s.optional ? (f += n, h -= n) : s.fallback ? (a[q](s.fallback), f += n, h -= n) : c.invalid.push({ p: h, v: v, e: s.pattern }), h += n; else { if (!b) a[q](x); v === x && (h += n); f += n } } b = d.charAt(t); p !== m + 1 || g.translation[b] ||
                a.push(b); return a.join("")
            }, callbacks: function (a) { var g = c.val(), m = g !== l, f = [g, a, b, e], p = function (a, b, c) { "function" === typeof e[a] && b && e[a].apply(this, c) }; p("onChange", !0 === m, f); p("onKeyPress", !0 === m, f); p("onComplete", g.length === d.length, f); p("onInvalid", 0 < c.invalid.length, [g, a, b, c.invalid, e]) }
        }; g.mask = d; g.options = e; g.remove = function () { var a = c.getCaret(); c.destroyEvents(); c.val(g.getCleanVal()); c.setCaret(a - c.getMCharsBeforeCount(a)); return b }; g.getCleanVal = function () { return c.getMasked(!0) }; g.init =
        function (d) { d = d || !1; e = e || {}; g.byPassKeys = a.jMaskGlobals.byPassKeys; g.translation = a.jMaskGlobals.translation; g.translation = a.extend({}, g.translation, e.translation); g = a.extend(!0, {}, g, e); m = c.getRegexMask(); !1 === d ? (e.placeholder && b.attr("placeholder", e.placeholder), b.attr("autocomplete", "off"), c.destroyEvents(), c.events(), d = c.getCaret(), c.val(c.getMasked()), c.setCaret(d + c.getMCharsBeforeCount(d, !0))) : (c.events(), c.val(c.getMasked())) }; g.init(!b.is("input"))
    }; a.maskWatchers = {}; var A = function () {
        var b =
        a(this), d = {}, e = b.attr("data-mask"); b.attr("data-mask-reverse") && (d.reverse = !0); b.attr("data-mask-clearifnotmatch") && (d.clearIfNotMatch = !0); "true" === b.attr("data-mask-selectonfocus") && (d.selectOnFocus = !0); if (z(b, e, d)) return b.data("mask", new y(this, e, d))
    }, z = function (b, d, e) { e = e || {}; var g = a(b).data("mask"), l = JSON.stringify; b = a(b).val() || a(b).text(); try { return "function" === typeof d && (d = d(b)), "object" !== typeof g || l(g.options) !== l(e) || g.mask !== d } catch (m) { } }; a.fn.mask = function (b, d) {
        d = d || {}; var e = this.selector,
        g = a.jMaskGlobals, l = a.jMaskGlobals.watchInterval, m = function () { if (z(this, b, d)) return a(this).data("mask", new y(this, b, d)) }; a(this).each(m); e && "" !== e && g.watchInputs && (clearInterval(a.maskWatchers[e]), a.maskWatchers[e] = setInterval(function () { a(document).find(e).each(m) }, l)); return this
    }; a.fn.unmask = function () { clearInterval(a.maskWatchers[this.selector]); delete a.maskWatchers[this.selector]; return this.each(function () { var b = a(this).data("mask"); b && b.remove().removeData("mask") }) }; a.fn.cleanVal = function () { return this.data("mask").getCleanVal() };
    a.applyDataMask = function () { a(document).find(a.jMaskGlobals.maskElements).filter(q.dataMaskAttr).each(A) }; var q = { maskElements: "input,td,span,div", dataMaskAttr: "*[data-mask]", dataMask: !0, watchInterval: 300, watchInputs: !0, watchDataMask: !1, byPassKeys: [9, 16, 17, 18, 36, 37, 38, 39, 40, 91], translation: { 0: { pattern: /\d/ }, 9: { pattern: /\d/, optional: !0 }, "#": { pattern: /\d/, recursive: !0 }, A: { pattern: /[a-zA-Z0-9]/ }, S: { pattern: /[a-zA-Z]/ } } }; a.jMaskGlobals = a.jMaskGlobals || {}; q = a.jMaskGlobals = a.extend(!0, {}, q, a.jMaskGlobals);
    q.dataMask && a.applyDataMask(); setInterval(function () { a.jMaskGlobals.watchDataMask && a.applyDataMask() }, q.watchInterval)
});